{"ast":null,"code":"var _jsxFileName = \"/Users/mateohernandez/Desktop/DynWebNotes/DynamicWebAppsWork/week3-4-5combo/src/components/Button.js\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\n// some of you may need to install and import twMerge so that your white text\n// does not overwrite your outline button text styles\n// to install, make sure you are in your project in terminal and enter:\n// npm i tailwind-merge\n// then import it like the next line below\nimport { twMerge } from 'tailwind-merge';\n// we only need to import PropTypes here if we are using their PropType validation\n// for example PropTypes.bool,\n// import PropTypes from 'prop-types' // ES6\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button = props => {\n  const {\n    children,\n    primary,\n    secondary,\n    success,\n    warning,\n    danger,\n    rounded,\n    outline,\n    ...otherProps\n  } = props;\n\n  // its very sad the PropTypes Library no longer supports the custom validation\n  // we wrote in class, instead, we can put that same validation logic here and\n  // spit our a console.warning message when we accidentaly use 2 variant booleans\n  const count = Number(!!primary) + Number(!!secondary) + Number(!!success) + Number(!!warning) + Number(!!danger);\n  if (count > 1) {\n    console.warn('You silly goose! Only one of primary, secondary, success, warning, danger can be TRUE!');\n    // if we throw a return in, we will exit this component function before we render anything, essentially skipping the invalid instance of Button used in another file (App)\n  }\n  const baseClass = 'flex items-center px-8 py-3 border';\n  const classes = twMerge(cx(otherProps.className, baseClass, {\n    // color variants, pick one\n    'bg-blue-500 border-blue-500 text-white': primary,\n    'bg-gray-900 border-gray-900 text-white': secondary,\n    'bg-green-500 border-green-500 text-white': success,\n    'bg-orange-400 border-orange-500 text-white': warning,\n    'bg-red-600 border-red-600 text-white': danger,\n    // outline and rounded additional style props\n    'rounded-full': rounded,\n    'bg-white': outline,\n    'text-blue-500': outline && primary,\n    'text-gray-900': outline && secondary,\n    'text-green-500': outline && success,\n    'text-orange-400': outline && warning,\n    'text-red-600': outline && danger\n  }));\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    ...otherProps,\n    className: classes,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n// validating props by type, this is the most common reason for using this library\n// typscript is also used for this more recently and a lot more\n_c = Button;\nButton.propTypes = {\n  primary: PropTypes.bool,\n  secondary: PropTypes.bool,\n  success: PropTypes.bool,\n  warning: PropTypes.bool,\n  danger: PropTypes.bool,\n  rounded: PropTypes.bool,\n  outline: PropTypes.bool\n};\nexport default Button;\nvar _c;\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"names":["cx","PropTypes","twMerge","jsxDEV","_jsxDEV","Button","props","children","primary","secondary","success","warning","danger","rounded","outline","otherProps","count","Number","console","warn","baseClass","classes","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","bool","$RefreshReg$"],"sources":["/Users/mateohernandez/Desktop/DynWebNotes/DynamicWebAppsWork/week3-4-5combo/src/components/Button.js"],"sourcesContent":["import cx from 'classnames'\nimport PropTypes from 'prop-types'\n// some of you may need to install and import twMerge so that your white text\n// does not overwrite your outline button text styles\n// to install, make sure you are in your project in terminal and enter:\n// npm i tailwind-merge\n// then import it like the next line below\nimport {twMerge} from 'tailwind-merge'\n// we only need to import PropTypes here if we are using their PropType validation\n// for example PropTypes.bool,\n// import PropTypes from 'prop-types' // ES6\n\nconst Button = (props) => {\n  const {\n    children,\n    primary,\n    secondary,\n    success,\n    warning,\n    danger,\n    rounded,\n    outline,\n    ...otherProps\n  } = props\n\n  // its very sad the PropTypes Library no longer supports the custom validation\n  // we wrote in class, instead, we can put that same validation logic here and\n  // spit our a console.warning message when we accidentaly use 2 variant booleans\n  const count =\n    Number(!!primary) +\n    Number(!!secondary) +\n    Number(!!success) +\n    Number(!!warning) +\n    Number(!!danger)\n\n  if (count > 1) {\n    console.warn(\n      'You silly goose! Only one of primary, secondary, success, warning, danger can be TRUE!'\n    )\n    // if we throw a return in, we will exit this component function before we render anything, essentially skipping the invalid instance of Button used in another file (App)\n  }\n\n  const baseClass = 'flex items-center px-8 py-3 border'\n  const classes = twMerge(\n    cx(otherProps.className, baseClass, {\n      // color variants, pick one\n      'bg-blue-500 border-blue-500 text-white': primary,\n      'bg-gray-900 border-gray-900 text-white': secondary,\n      'bg-green-500 border-green-500 text-white': success,\n      'bg-orange-400 border-orange-500 text-white': warning,\n      'bg-red-600 border-red-600 text-white': danger,\n      // outline and rounded additional style props\n      'rounded-full': rounded,\n      'bg-white': outline,\n      'text-blue-500': outline && primary,\n      'text-gray-900': outline && secondary,\n      'text-green-500': outline && success,\n      'text-orange-400': outline && warning,\n      'text-red-600': outline && danger,\n    })\n  )\n\n  return (\n    <button {...otherProps} className={classes}>\n      {children}\n    </button>\n  )\n}\n\n// validating props by type, this is the most common reason for using this library\n// typscript is also used for this more recently and a lot more\nButton.propTypes = {\n  primary: PropTypes.bool,\n  secondary: PropTypes.bool,\n  success: PropTypes.bool,\n  warning: PropTypes.bool,\n  danger: PropTypes.bool,\n  rounded: PropTypes.bool,\n  outline: PropTypes.bool,\n}\n\nexport default Button\n"],"mappings":";AAAA,OAAOA,EAAE,MAAM,YAAY;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA,SAAQC,OAAO,QAAO,gBAAgB;AACtC;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,MAAM,GAAIC,KAAK,IAAK;EACxB,MAAM;IACJC,QAAQ;IACRC,OAAO;IACPC,SAAS;IACTC,OAAO;IACPC,OAAO;IACPC,MAAM;IACNC,OAAO;IACPC,OAAO;IACP,GAAGC;EACL,CAAC,GAAGT,KAAK;;EAET;EACA;EACA;EACA,MAAMU,KAAK,GACTC,MAAM,CAAC,CAAC,CAACT,OAAO,CAAC,GACjBS,MAAM,CAAC,CAAC,CAACR,SAAS,CAAC,GACnBQ,MAAM,CAAC,CAAC,CAACP,OAAO,CAAC,GACjBO,MAAM,CAAC,CAAC,CAACN,OAAO,CAAC,GACjBM,MAAM,CAAC,CAAC,CAACL,MAAM,CAAC;EAElB,IAAII,KAAK,GAAG,CAAC,EAAE;IACbE,OAAO,CAACC,IAAI,CACV,wFACF,CAAC;IACD;EACF;EAEA,MAAMC,SAAS,GAAG,oCAAoC;EACtD,MAAMC,OAAO,GAAGnB,OAAO,CACrBF,EAAE,CAACe,UAAU,CAACO,SAAS,EAAEF,SAAS,EAAE;IAClC;IACA,wCAAwC,EAAEZ,OAAO;IACjD,wCAAwC,EAAEC,SAAS;IACnD,0CAA0C,EAAEC,OAAO;IACnD,4CAA4C,EAAEC,OAAO;IACrD,sCAAsC,EAAEC,MAAM;IAC9C;IACA,cAAc,EAAEC,OAAO;IACvB,UAAU,EAAEC,OAAO;IACnB,eAAe,EAAEA,OAAO,IAAIN,OAAO;IACnC,eAAe,EAAEM,OAAO,IAAIL,SAAS;IACrC,gBAAgB,EAAEK,OAAO,IAAIJ,OAAO;IACpC,iBAAiB,EAAEI,OAAO,IAAIH,OAAO;IACrC,cAAc,EAAEG,OAAO,IAAIF;EAC7B,CAAC,CACH,CAAC;EAED,oBACER,OAAA;IAAA,GAAYW,UAAU;IAAEO,SAAS,EAAED,OAAQ;IAAAd,QAAA,EACxCA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb,CAAC;;AAED;AACA;AAAAC,EAAA,GA1DMtB,MAAM;AA2DZA,MAAM,CAACuB,SAAS,GAAG;EACjBpB,OAAO,EAAEP,SAAS,CAAC4B,IAAI;EACvBpB,SAAS,EAAER,SAAS,CAAC4B,IAAI;EACzBnB,OAAO,EAAET,SAAS,CAAC4B,IAAI;EACvBlB,OAAO,EAAEV,SAAS,CAAC4B,IAAI;EACvBjB,MAAM,EAAEX,SAAS,CAAC4B,IAAI;EACtBhB,OAAO,EAAEZ,SAAS,CAAC4B,IAAI;EACvBf,OAAO,EAAEb,SAAS,CAAC4B;AACrB,CAAC;AAED,eAAexB,MAAM;AAAA,IAAAsB,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}