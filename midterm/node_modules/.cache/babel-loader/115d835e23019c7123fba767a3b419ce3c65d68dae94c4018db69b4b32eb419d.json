{"ast":null,"code":"var _jsxFileName = \"/Users/mateohernandez/Desktop/DynWeb/dynamicwebmidterm/src/pages/DropdownPage.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Dropdown from '../components/Dropdown';\n// import {Panel} from '../components/Dropdown'\n// import Panel from '../components/Panel'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OPTIONS = [{\n  label: 'Red',\n  value: 'red'\n}, {\n  label: 'Green',\n  value: 'green'\n}, {\n  label: 'Blue',\n  value: 'blue'\n}];\nconst COLOR_MAP = {\n  red: 'bg-red-500',\n  green: 'bg-green-400',\n  blue: 'bg-blue-500'\n};\n\n// example usage of COLOR_MAP\n// COLOR_MAP[value.value]\n\n// template literals\n// const color = 'red-' + value?.value + '-500'\n// const colorClass = `bg-${value?.value}-500`\n\nconst DATA_TO_FILTER = [{\n  id: 1,\n  name: 'katie',\n  team: 'red'\n}, {\n  id: 2,\n  name: 'tony',\n  team: 'green'\n}, {\n  id: 3,\n  name: 'amy',\n  team: 'blue'\n}, {\n  id: 4,\n  name: 'andy',\n  team: 'red'\n}, {\n  id: 5,\n  name: 'pete',\n  team: 'green'\n}];\nconst DropdownPage = () => {\n  _s();\n  // this piece of state is where we recieve our dropdown selected value\n  // we keep track of it in the parent component so that it, and all children of the parent\n  // have access to this piece of states value and can update and rerender when it changes\n  const [value, setValue] = useState(null);\n  let filteredData = DATA_TO_FILTER;\n\n  // if the used selected an option from our dropdown, find the value key, if they oth exist\n  if (value !== null && value !== void 0 && value.value) {\n    // filter our array by value of selected option\n    filteredData = DATA_TO_FILTER.filter(student => student.team === value.value);\n  }\n  const handleChange = option => {\n    setValue(option);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: COLOR_MAP[value === null || value === void 0 ? void 0 : value.value] || null,\n      children: [\"Dropdown page with user selectd value of: \", value === null || value === void 0 ? void 0 : value.label]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n      options: OPTIONS,\n      onChange: handleChange,\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: COLOR_MAP[value === null || value === void 0 ? void 0 : value.value],\n      children: [\"Students from \", value === null || value === void 0 ? void 0 : value.label, \":\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), filteredData.map(student => {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: student.name\n      }, student.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 16\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(DropdownPage, \"EEjdpY/CSe7/lDQurV9yi1RbKSs=\");\n_c = DropdownPage;\nexport default DropdownPage;\nvar _c;\n$RefreshReg$(_c, \"DropdownPage\");","map":{"version":3,"names":["useState","Dropdown","jsxDEV","_jsxDEV","OPTIONS","label","value","COLOR_MAP","red","green","blue","DATA_TO_FILTER","id","name","team","DropdownPage","_s","setValue","filteredData","filter","student","handleChange","option","children","className","fileName","_jsxFileName","lineNumber","columnNumber","options","onChange","map","_c","$RefreshReg$"],"sources":["/Users/mateohernandez/Desktop/DynWeb/dynamicwebmidterm/src/pages/DropdownPage.js"],"sourcesContent":["import {useState} from 'react'\nimport Dropdown from '../components/Dropdown'\n// import {Panel} from '../components/Dropdown'\n// import Panel from '../components/Panel'\n\nconst OPTIONS = [\n  {label: 'Red', value: 'red'},\n  {label: 'Green', value: 'green'},\n  {label: 'Blue', value: 'blue'},\n]\n\nconst COLOR_MAP = {\n  red: 'bg-red-500',\n  green: 'bg-green-400',\n  blue: 'bg-blue-500',\n}\n\n// example usage of COLOR_MAP\n// COLOR_MAP[value.value]\n\n// template literals\n// const color = 'red-' + value?.value + '-500'\n// const colorClass = `bg-${value?.value}-500`\n\nconst DATA_TO_FILTER = [\n  {id: 1, name: 'katie', team: 'red'},\n  {id: 2, name: 'tony', team: 'green'},\n  {id: 3, name: 'amy', team: 'blue'},\n  {id: 4, name: 'andy', team: 'red'},\n  {id: 5, name: 'pete', team: 'green'},\n]\n\nconst DropdownPage = () => {\n  // this piece of state is where we recieve our dropdown selected value\n  // we keep track of it in the parent component so that it, and all children of the parent\n  // have access to this piece of states value and can update and rerender when it changes\n  const [value, setValue] = useState(null)\n\n  let filteredData = DATA_TO_FILTER\n\n  // if the used selected an option from our dropdown, find the value key, if they oth exist\n  if (value?.value) {\n    // filter our array by value of selected option\n    filteredData = DATA_TO_FILTER.filter(\n      (student) => student.team === value.value\n    )\n  }\n\n  const handleChange = (option) => {\n    setValue(option)\n  }\n\n  return (\n    <div>\n      <h1 className={COLOR_MAP[value?.value] || null}>\n        Dropdown page with user selectd value of: {value?.label}\n      </h1>\n      <Dropdown options={OPTIONS} onChange={handleChange} value={value} />\n      <h2 className={COLOR_MAP[value?.value]}>Students from {value?.label}:</h2>\n      {filteredData.map((student) => {\n        return <p key={student.id}>{student.name}</p>\n      })}\n    </div>\n  )\n}\n\nexport default DropdownPage\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}